@charset "utf-8";

/* Based On:
/* normalize.css v7.0.0
 * github.com/necolas/normalize.css
 * MIT Licensed
/* Skeleton V2.0.4
 * www.getskeleton.com
 * MIT Licensed
 */

/* Code
–––––––––––––––––––––––––––––––––––––––––––––––––– */
/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */

pre {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

code {
  padding: .2rem .5rem;
  margin: 0 .2rem;
  font-size: 90%;
  white-space: nowrap;
  background: $light-grey;
  border: 1px solid $dark-grey;
  border-radius: 4px; }
pre > code {
  display: block;
  padding: 1rem 1.5rem;
  white-space: pre;
  overflow: scroll;
}

$opposite: darken(invert($brand-color), 5%);
$triad-one: darken(adjust-hue($brand-color, 120deg), 20%);  // green
$triad-two: darken(adjust-hue($brand-color, -120deg), 10%); // blue

.highlight {
  .err   { color: $text-color; background-color: $brand-color } // Error

  .c,    // Comment
  .c1,   // Comment.Single
  .cm,   // Comment.Multiline
  .cp,   // Comment.Preproc
  .cs {  // Comment.Special
    color: $triad-one;
  }
  .cp,   // Comment.Preproc
  .cs {  // Comment.Special
    font-weight: $bold-weight;
    font-style: italic;
  }

  .gh    // Generic.Heading
  .go    // Generic.Output
  .gp    // Generic.Prompt
  .gs    // Generic.Strong
  .gu    // Generic.Subheading
  .gt {  // Generic.Traceback
    color: $triad-two 
  } 
  .ge    { font-style: italic } // Generic.Emph
  .gr    { color: $brand-color } // Generic.Error
  .gd,   // Generic.Deleted
  .gi {  // Generic.Inserted
    color: $text-color;
  }
  .gd    { background-color: $brand-color } // Generic.Deleted
  .gd .x { background-color: darken($brand-color, 10%) } // Generic.Deleted.Specific
  .gi    { background-color: $triad-one } // Generic.Inserted
  .gi .x { background-color: darken($triad-one, 10%) } // Generic.Inserted.Specific

  .k,    // Keyword
  .kc,   // Keyword.Constant
  .kd,   // Keyword.Declaration
  .kp,   // Keyword.Pseudo
  .kr,   // Keyword.Reserved
  .kt {  // Keyword.Type
    color: $opposite;
    font-weight: $bold-weight;
  } 

  .na,   // Name.Attribute
  .nb,   // Name.Builtin
  .nc,   // Name.Class
  .no,   // Name.Constant
  .ni,   // Name.Entity
  .nc,   // Name.Class
  .ne,   // Name.Exception
  .nf,   // Name.Function
  .nn,   // Name.Namespace
  .nt,   // Name.Tag
  .nv,   // Name.Variable
  .bp,   // Name.Builtin.Pseudo
  .vc,   // Name.Variable.Class
  .vg,   // Name.Variable.Global
  .vi {  // Name.Variable.Instance
    color: $opposite
  } 

  .nc,   // Name.Class
  .ne,   // Name.Exception
  .nf,   // Name.Function
  .o,    // Operator
  .ow {  // Operator.Word
    font-weight: $bold-weight
  } 

  .w     { color: $brand-color } // Text.Whitespace

  .m,    // Literal.Number
  .mf,   // Literal.Number.Float
  .mh,   // Literal.Number.Hex
  .mi,   // Literal.Number.Integer
  .mo,   // Literal.Number.Oct
  .il,   // Literal.Number.Integer.Long
  .s,    // Literal.String
  .s1    // Literal.String.Single
  .s2,   // Literal.String.Double
  .sb,   // Literal.String.Backtick
  .sc,   // Literal.String.Char
  .sd,   // Literal.String.Doc
  .sh,   // Literal.String.Heredoc
  .si,   // Literal.String.Interpol
  .sx {  // Literal.String.Other
    color: $triad-two;
  }
  .se,   // Literal.String.Escape
  .sr,   // Literal.String.Regex
  .ss {  // Literal.String.Symbol
    color: $brand-color;
  }
}
